#!/usr/bin/env python

from __future__ import print_function

import argparse
import colorama
import hashlib
import os
import os.path
import requests
import shutil
import tabulate
import zipfile

import technic.solder

# pylint: disable=unused-argument

USER_HOME    = os.environ['HOME']
SOLDER_CACHE = os.path.join(USER_HOME, '.solder-cache')

def better_print(message, *args, **kwargs):
	if 'color' in kwargs:
		color = kwargs['color']

		message = color + message + colorama.Style.RESET_ALL

		del kwargs['color']

	message = message.format(*args, **kwargs)

	print(message)

def print_error(message, *args, **kwargs):
	better_print(
		message,
		color = colorama.Fore.RED,
		*args,
		**kwargs
	)

def parse_server_info_args(parsers):
	parsers.add_parser(
		'info',
		help = 'Get the server information',
	).set_defaults(func = cmd_server_info)

def parse_mod_args(parsers):
	mod_parser = parsers.add_parser(
		'mod',
	)

	subcommands = mod_parser.add_subparsers()

	info_parser = subcommands.add_parser(
		'info',
		help = 'Get information about a mod',
	)

	info_parser.add_argument(
		'mod_slug',
		type = str,
		help = 'The modslug',
	)

	info_parser.set_defaults(func = cmd_mod_info)

def parse_modpack_args(parsers):
	modpack_parser = parsers.add_parser(
		'modpack',
	)

	subcommands = modpack_parser.add_subparsers()

	subcommands.add_parser(
		'list',
		help = 'List all available modpacks',
	).set_defaults(func = cmd_modpack_list)

	info_parser = subcommands.add_parser(
		'info',
		help = 'Get information about a specific modpack',
	)

	info_parser.add_argument(
		'modpack_slug',
		type = str,
		help = 'The modpack slug',
	)

	info_parser.set_defaults(func = cmd_modpack_info)

	build_parser = subcommands.add_parser(
		'build',
	)

	build_parser.add_argument(
		'modpack_slug',
		type = str,
		help = 'The modpack slug',
	)

	build_parser.add_argument(
		'build',
		type = str,
		help = 'The modpack build',
	)

	parse_modpack_build_args(build_parser.add_subparsers())

def parse_modpack_build_args(parsers):
	parsers.add_parser(
		'info',
	).set_defaults(func = cmd_modpack_build_info)

	parsers.add_parser(
		'download',
	).set_defaults(func = cmd_modpack_build_download)

def parse_args():
	parser = argparse.ArgumentParser(
		description = 'Solder command line client',
	)

	parser.add_argument(
		'solder_url',
		type = str,
		help = 'The Solder server URL',
	)

	subcommand_parsers = parser.add_subparsers()
	parse_server_info_args(subcommand_parsers)
	parse_mod_args(subcommand_parsers)
	parse_modpack_args(subcommand_parsers)

	return parser.parse_args()

def command(func):
	def wrapper(args):
		server = technic.solder.SolderServer(args.solder_url)

		return func(server, args)

	return wrapper

@command
def cmd_server_info(server, args):
	info = server.server_info
	print(
		'Version {} {}'.format(
			info[0],
			info[1],
		)
	)

@command
def cmd_mod_info(server, args):
	mod = server.get_mod_info(args.mod_slug)
	better_print(
		mod['pretty_name'],
		color = colorama.Fore.GREEN,
	)

	print(
		tabulate.tabulate(
			[
				['Slug',        mod['name']],
				['Author',      mod['author']],
				['Description', mod['description']],
				['Website',     mod['link']],
				['Donate URL',  mod['donate_link']],
				['Versions',    ', '.join(mod['versions'][:10])],
			]
		)
	)

@command
def cmd_modpack_list(server, args):
	print(
		tabulate.tabulate(
			[
				[slug, name]
				for slug, name in server.modpacks.iteritems()
			],
			headers = ['Slug', 'Name'],
		)
	)

@command
def cmd_modpack_info(server, args):
	modpack = server.get_modpack_info(args.modpack_slug)

	better_print(
		modpack['display_name'],
		color = colorama.Fore.GREEN,
	)

	print(
		tabulate.tabulate(
			[
				['Slug',              modpack['name']],
				['URL',               modpack['url']],
				['Recommended Build', modpack['recommended']],
				['Latest Build',      modpack['latest']],
				['Builds',            ', '.join(modpack['builds'][:10])],
			]
		)
	)

@command
def cmd_modpack_build_info(server, args):
	build_info = server.get_modpack_build_info(args.modpack_slug, args.build)

	better_print(
		'{modpack} Build {build}',
		color = colorama.Fore.GREEN,
		modpack = args.modpack_slug,
		build   = args.build,
	)

	print(
		tabulate.tabulate(
			[
				['Minecraft Version', build_info['minecraft']],
				['Forge',             build_info['forge']],
				['Mod Count',         len(build_info['mods'])],
			]
		)
	)

def download_mod(mod_info):
	better_print('\t{}', mod_info['name'], color = colorama.Fore.CYAN)

	url      = mod_info['url']
	filename = os.path.basename(url)

	better_print(
		'\t\tDownloading...',
		color = colorama.Fore.YELLOW,
	)

	if not os.path.exists(SOLDER_CACHE):
		os.mkdir(SOLDER_CACHE)

	if os.path.exists(os.path.join(SOLDER_CACHE, filename)):
		better_print(
			'\t\tCached, skipping',
			color = colorama.Fore.YELLOW,
		)

		shutil.copy(os.path.join(SOLDER_CACHE, filename), '.')
	else:
		resp = requests.get(url, stream = True)
		with open(filename, 'wb') as file_handle:
			for chunk in resp.iter_content(chunk_size = 1024):
				if chunk:
					file_handle.write(chunk)
					file_handle.flush()

		better_print(
			'\t\tVerifying...',
			color = colorama.Fore.YELLOW,
		)

		md5 = hashlib.md5(open(filename, 'rb').read()).hexdigest()
		if md5 != mod_info['md5']:
			better_print(
				'\t\tFile did not download correctly!',
				color = colorama.Fore.RED,
			)

			return

		shutil.copy(filename, os.path.join(SOLDER_CACHE, filename))

	better_print(
		'\t\tUnpacking...',
		color = colorama.Fore.YELLOW,
	)

	with zipfile.ZipFile(filename, 'r') as zip_handle:
		zip_handle.extractall()

	better_print(
		'\t\tCleaning...',
		color = colorama.Fore.YELLOW,
	)

	os.remove(filename)

	better_print(
		'\t\tFinished!',
		color = colorama.Fore.GREEN,
	)

@command
def cmd_modpack_build_download(server, args):
	build_info = server.get_modpack_build_info(args.modpack_slug, args.build)

	better_print(
		'Starting download of build {build} for {modpack}...',
		color   = colorama.Fore.YELLOW,
		modpack = args.modpack_slug,
		build   = args.build,
	)

	for mod in build_info['mods']:
		download_mod(mod)

	better_print(
		'Finished downloading modpack build!',
		color = colorama.Fore.GREEN,
	)

def main():
	args = parse_args()

	try:
		args.func(args)
	except technic.solder.SolderAPIError as ex:
		print_error(ex.message)

if __name__ == '__main__':
	main()

